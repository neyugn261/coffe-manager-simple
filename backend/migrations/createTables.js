const { pool } = require("../config/database");

// SQL t·∫°o c√°c b·∫£ng ƒë∆°n gi·∫£n cho qu√°n cafe nh·ªè
const createTablesSQL = {
    // B·∫£ng menu items (s·∫£n ph·∫©m)
    menu_items: `
    CREATE TABLE IF NOT EXISTS menu_items (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      price DECIMAL(10,2) NOT NULL,
      category ENUM('coffee', 'tea', 'juice', 'food', 'other') DEFAULT 'other',
      image_url VARCHAR(255)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
  `,

    // B·∫£ng orders (ƒë∆°n h√†ng)
    orders: `
    CREATE TABLE IF NOT EXISTS orders (
      id INT AUTO_INCREMENT PRIMARY KEY,
      customer_name VARCHAR(255),
      order_type ENUM('takeaway', 'dine_in') DEFAULT 'takeaway',
      table_number INT NULL,
      status ENUM('pending', 'preparing', 'ready', 'completed', 'cancelled') DEFAULT 'pending',
      payment_status ENUM('unpaid', 'paid') DEFAULT 'unpaid',
      notes TEXT,
      total DECIMAL(10,2) NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      paid_at DATETIME NULL
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
  `,

    // B·∫£ng order_details (chi ti·∫øt ƒë∆°n h√†ng)
    order_details: `
    CREATE TABLE IF NOT EXISTS order_details (
      id INT AUTO_INCREMENT PRIMARY KEY,
      order_id INT,
      menu_item_id INT,
      quantity INT,
      price DECIMAL(10,2),
      FOREIGN KEY (order_id) REFERENCES orders(id),
      FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
  `,
};

// D·ªØ li·ªáu m·∫´u ƒë∆°n gi·∫£n
const sampleData = {
    menu_items: `
    INSERT INTO menu_items (id, name, price, category, image_url) VALUES
    (1, 'C√† ph√™ ƒëen', 15000, 'coffee', 'https://images.unsplash.com/photo-1497935586351-b67a49e012bf?w=400&h=300&fit=crop&crop=center'),
    (2, 'C√† ph√™ s·ªØa', 20000, 'coffee', 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop&crop=center'),
    (3, 'Cappuccino', 35000, 'coffee', 'https://images.unsplash.com/photo-1534778101976-62847782c213?w=400&h=300&fit=crop&crop=center'),
    (4, 'Latte', 35000, 'coffee', 'https://images.unsplash.com/photo-1561882468-9110e03e0f78?w=400&h=300&fit=crop&crop=center'),
    (5, 'Tr√† ƒë√†o', 25000, 'tea', 'https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=400&h=300&fit=crop&crop=center'),
    (6, 'Tr√† s·ªØa', 30000, 'tea', 'https://images.unsplash.com/photo-1525385133512-2f3bdd039054?w=400&h=300&fit=crop&crop=center'),
    (7, 'Sinh t·ªë b∆°', 35000, 'juice', 'https://images.unsplash.com/photo-1570197788417-0e82375c9371?w=400&h=300&fit=crop&crop=center'),
    (8, 'N∆∞·ªõc √©p cam', 25000, 'juice', 'https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=400&h=300&fit=crop&crop=center'),
    (9, 'B√°nh croissant', 25000, 'food', 'https://images.unsplash.com/photo-1555507036-ab794f4807ed?w=400&h=300&fit=crop&crop=center'),
    (10, 'B√°nh m√¨ sandwich', 45000, 'food', 'https://images.unsplash.com/photo-1553909489-cd47e0ef937f?w=400&h=300&fit=crop&crop=center')
    ON DUPLICATE KEY UPDATE
    name = VALUES(name),
    price = VALUES(price),
    category = VALUES(category),
    image_url = VALUES(image_url);
  `,
};

async function createTables() {
    const connection = await pool.getConnection();

    try {
        console.log("üî® B·∫Øt ƒë·∫ßu t·∫°o b·∫£ng database ƒë∆°n gi·∫£n...");

        // T·∫°o t·ª´ng b·∫£ng theo th·ª© t·ª± (quan tr·ªçng v√¨ c√≥ foreign key)
        const tableOrder = ["menu_items", "orders", "order_details"];

        for (const tableName of tableOrder) {
            console.log(`üìã T·∫°o b·∫£ng: ${tableName}`);
            await connection.execute(createTablesSQL[tableName]);
            console.log(`‚úÖ B·∫£ng ${tableName} ƒë√£ t·∫°o th√†nh c√¥ng`);
        }

        console.log("üéØ T·∫•t c·∫£ b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
        return true;
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o b·∫£ng:", error.message);
        throw error;
    } finally {
        connection.release();
    }
}

async function insertSampleData() {
    const connection = await pool.getConnection();

    try {
        console.log("üìù B·∫Øt ƒë·∫ßu th√™m d·ªØ li·ªáu m·∫´u...");

        console.log(`üìä Th√™m d·ªØ li·ªáu menu items`);
        await connection.execute(sampleData.menu_items);
        console.log(`‚úÖ D·ªØ li·ªáu menu items ƒë√£ th√™m th√†nh c√¥ng`);

        console.log("üéâ T·∫•t c·∫£ d·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c th√™m!");
        return true;
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m d·ªØ li·ªáu m·∫´u:", error.message);
        throw error;
    } finally {
        connection.release();
    }
}

async function dropAllTables() {
    const connection = await pool.getConnection();

    try {
        console.log("üóëÔ∏è X√≥a t·∫•t c·∫£ b·∫£ng...");

        // T·∫Øt foreign key checks ƒë·ªÉ c√≥ th·ªÉ x√≥a b·∫£ng
        await connection.execute("SET FOREIGN_KEY_CHECKS = 0");

        const tables = ["order_details", "orders", "menu_items"];

        for (const table of tables) {
            await connection.execute(`DROP TABLE IF EXISTS ${table}`);
            console.log(`‚úÖ ƒê√£ x√≥a b·∫£ng: ${table}`);
        }

        // B·∫≠t l·∫°i foreign key checks
        await connection.execute("SET FOREIGN_KEY_CHECKS = 1");

        console.log("üéØ ƒê√£ x√≥a t·∫•t c·∫£ b·∫£ng!");
        return true;
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a b·∫£ng:", error.message);
        throw error;
    } finally {
        connection.release();
    }
}

module.exports = {
    createTables,
    insertSampleData,
    dropAllTables,
};
